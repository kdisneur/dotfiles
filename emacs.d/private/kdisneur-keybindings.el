(defun kdisneur-keybindings/define-all-bindings (definitions)
  (dolist (definition definitions)
    (let ((mode (car definition))
          (bindings (cdr definition)))
      (if (equal mode ':global)
          (kdisneur-keybindings/define-global-binding bindings)
        (kdisneur-keybindings/define-mode-binding mode bindings)))))

(defun kdisneur-keybindings/define-global-binding (bindings)
  (dolist (binding bindings)
    (let ((shortcut (car binding))
          (title (car (cdr binding)))
          (command (car (cdr (cdr binding)))))
      (bind-key shortcut command)
      (which-key-add-key-based-replacements shortcut title))))

(defun kdisneur-keybindings/define-mode-binding (mode bindings)
  (dolist (binding bindings)
    (let ((shortcut (car binding))
          (title (car (cdr binding)))
          (command (car (cdr (cdr binding)))))
      (bind-key shortcut command (eval (intern (concat (symbol-name mode) "-map"))))
      (which-key-add-major-mode-key-based-replacements mode shortcut title))))

(kdisneur-keybindings/define-all-bindings
 '((:global
    ("M-f" "Next start of word" forward-to-word)
    ("M-g" "Next end of word" forward-word)
    ("M-x" "Execute command" helm-M-x)
    ("C-x C-f" "Find files" helm-find-files)
    ("C-=" "Expand region" er/expand-region)
    ("C-S-a" "Back to indentation" back-to-indentation)
    ("C-o" "Append line" kdisneur-custom/create-next-line-and-goto)
    ("C-S-o" "Insert line" kdisneur-custom/create-previous-line-and-goto)
    ("C-c :" "Execute command" helm-M-x)
    ("C-c a s" "Servers" prodigy)
    ("C-c a p" "Proceses" helm-top)
    ("C-c a w" "Wikipedia" helm-wikipedia-suggest)
    ("C-c e n" "Next error" flycheck-next-error)
    ("C-c e p" "Previous error" flycheck-previous-error)
    ("C-c e c" "Clear errors" flycheck-clear)
    ("C-c f c" "Find Emacs conf" kdisneur-custom/find-init-file)
    ("C-c f f" "Find files" helm-find-files)
    ("C-c f r" "Find recent files" helm-recentf)
    ("C-c p b" "Find recent files" helm-projectile-switch-to-buffer)
    ("C-c p / /" "Search in files" helm-projectile-ag)
    ("C-c p f" "Find files" helm-projectile-find-file)
    ("C-c p p" "Switch project" helm-projectile-switch-project)
    ("C-c q q" "Quit" save-buffers-kill-emacs)
    ("C-c q r" "Restart" restart-emacs))
   (alchemist-test-mode
    ("C-c j n" "Jump to next test" alchemist-test-mode-jump-to-next-test)
    ("C-c j p" "Jump to previous test" alchemist-test-mode-jump-to-previous-test))
   (alchemist-test-report-mode
    ("C-c e n" "Next error" alchemist-test-next-result)
    ("C-c e p" "Previous error" alchemist-test-previous-result))
   (elixir-mode
    ("C-c j b" "Jump back" alchemist-goto-jump-back)
    ("C-c j d" "Jump to definition" alchemist-goto-definition-at-point)
    ("C-c j n" "Jump to next function" alchemist-goto-jump-to-next-def-symbol)
    ("C-c j p" "Jump to previous function" alchemist-goto-jump-to-previous-def-symbol)
    ("C-c j t" "Jump to test" alchemist-project-toggle-file-and-tests)
    ("C-c j T" "Jummp to test other window" alchemist-project-toggle-file-and-tests-other-window)
    ("C-c t a" "Test suite" alchemist-mix-test)
    ("C-c t b" "Test buffer" alchemist-mix-test-this-buffer)
    ("C-c t r" "Run latest" alchemist-mix-rerun-last-test)
    ("C-c t t" "Test function" alchemist-mix-test-at-point))
   (emacs-lisp-mode
    ("C-c f l" "Find Lisp libraries" helm-locate-library)
    ("C-c j d" "Jump to definition" kdisneur-custom/jump-to-lisp-function)
    ("C-c j n" "Jump to next function" kdisneur-custom/jump-to-next-lisp-function)
    ("C-c j p" "Jump to previous function" kdisneur-custom/jump-to-previous-lisp-function)
    ("C-c x b" "Eval buffer" eval-buffer)
    ("C-c x f" "Eval function" eval-defun))
   (js2-mode
    ("C-c r f" "Extract to function" js2r-extract-function))
   (ruby-mode
    ("C-c j n" "Jump to next method" kdisneur-custom/jump-to-next-ruby-function)
    ("C-c j p" "Jump to previous method" kdisneur-custom/jump-to-previous-ruby-function)
    ("C-c p / c" "Search in Ruby files" kdisneur-custom/helm-projectile-ag-ruby)
    ("C-c r b" "Block syntax" ruby-toggle-block)
    ("C-c r c" "Multiline if" ruby-refactor-convert-post-conditional)
    ("C-c r h" "Hash syntax" ruby-toggle-hash-syntax)
    ("C-c r f" "Extract to method" ruby-refactor-extract-to-method)
    ("C-c s '" "Single quote" ruby-tools-to-single-quote-string)
    ("C-c s \"" "Double quote" ruby-tools-to-double-quote-string)
    ("C-c s :" "Symbol" ruby-tools-to-symbol))
   (text-mode
    ("C-c e s" "Spelling suggestion" helm-flyspell-correct)
    ("C-c e n" "Next error" flyspell-goto-next-error)
    ("C-c e p" "Previous error" flyspell-goto-previous-error))))

(provide 'kdisneur-keybindings)
