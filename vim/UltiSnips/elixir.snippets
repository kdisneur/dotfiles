priority 1
snippet defcontroller
defmodule ${1:`substitute(substitute(substitute(expand('%:r'), '^[^/]\+/\(.*\)', '\1', ''), '\(_\|/\|^\)\([^/_]\+\)', '\u\2.\3', 'g'), '.$', '', '')`} do
  use $2.Web, :controller

  $3
end
endsnippet
snippet def
def $1($2) do
  $0
end
endsnippet
snippet def:
def $1($2), do: $0
endsnippet
snippet defp
defp $1($2) do
  $0
end
endsnippet
snippet defp:
defp $1($2), do: $0
endsnippet
snippet deftest
test "$1: $2" do
  $0
end
endsnippet
snippet defgenserver
defmodule $1 do
  use GenServer

  def start_link${2:()} do
    GenServer.start_link(__MODULE__, ${3:[]})
  end

  $0
end
endsnippet
snippet defsupervisor
defmodule $1 do
  use Supervisor

  def start_link do
    Supervisor.start_link(__MODULE__, [])
  end

  def init([]) do
    children = [
		  $0
    ]

    supervise(children, strategy: :one_for_one)
  end
end
endsnippet
snippet supervisorworker
worker(${1:Module}, [${2:params}])$0
endsnippet
snippet supervisorsupervisor
supervisor(${1:Module}, [${2:params}])$0
endsnippet

snippet workflowdoc
@moduledoc """
${1:general description}

## Input

### Payload

- \`"${2:parameter name}"\`: ${3:(**required**) A description}

### Meta

- \`:${4:parameter name}\`: ${5:(**required**) A description}

## Output

### Success

It returns a \`:ok\` tuple with ${6:return type}

### Error

#### ${7:ModuleError}

${7:description}
"""
endsnippet
