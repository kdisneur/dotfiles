#!/usr/bin/env ruby

require 'ostruct'
require 'parallel'
require 'thor'
require 'yaml'

class AppFinder
  def yaml_config
    YAML.load(File.read(File.join(File.dirname(__FILE__), 'apps.yml')))
  end

  def apps
    @apps ||= yaml_config['apps'].map(&method(:build_app))
  end

  def build_app(args)
    app_name = args.first
    attrs    = args[1]
    OpenStruct.new({ name: app_name }.merge(attrs))
  end

  def self.find_all_by_name(app_name)
    new.apps.select { |app| app.name == app_name }
  end

  def self.find_all_by_tag(tag_name)
    new.apps.select { |app|  app.tags.include?(tag_name.to_s) }
  end
end

class AppStart < Thor
  include Thor::Actions

  desc "Start an appllication", "start APP_NAME"
  method_option :tag, type: :boolean, aliases: '-t'
  def start(app_name)
    find_each(app_name, options[:tag], &method(:start_puma))
  end

  desc "Stop an appllication", "stop APP_NAME"
  method_option :tag, type: :boolean, aliases: '-t'
  def stop(app_name)
    find_each(app_name, options['tag'], &method(:stop_puma))
  end

  no_commands do
    def find_each(name, tag, &block)
      apps = tag ? AppFinder.find_all_by_tag(name) : AppFinder.find_all_by_name(name)
      Parallel.each(apps, in_threads: apps.length, &block)
    end

    def start_puma(app)
      sock_file = File.join(app.directory, 'tmp', "#{app.name}.sock")
      pid_file  = File.join(app.directory, 'tmp', 'pids', "#{app.name}.pid")

      run("cd #{app.directory} && puma -e development -d -b unix://#{sock_file} --pidfile #{pid_file}")
      say("#{app.name} started", :green)
    end

    def stop_puma(app)
      pid_file = File.join(app.directory, 'tmp', 'pids', "#{app.name}.pid")

      if File.exists?(pid_file)
        pid = File.read(pid_file)
        run("kill -s SIGTERM #{pid}")
        say("#{app.name} stopped", :green)
      else
        say("#{app.name} pid does not exist", :red)
      end
    end
  end
end

AppStart.start(ARGV)
