#! /bin/sh

ENV_VARS_FOLDER="${HOME}/.config/env_vars"

env_vars___find_root_folder () {
  if [[ ${1} == "/" ]]; then
    echo "/"
  elif [[ -d ${1}/.git ]]; then
    echo $1
  else
    env_vars___find_root_folder $(dirname $1)
  fi
}

env_vars___export_to_heroku () {
  if [[ "${1}" == "" || "${2}" == "" ]]; then
    echo "An application name and an environment is needed as parameters"
    return 1
  fi
  if [[ "$(env_vars___find_root_folder $(pwd))" != "/" ]]; then
    if [[ -e $(env_vars___find_root_folder $(pwd))/.env_vars.${2} ]]; then
      cat .env_vars.${2} | ruby -e "\
        variables=[]; \
        while line = gets do \
          variables << line.chomp.gsub(/export[ ]+/, '') \
        end; \
        system 'heroku config:set ' + variables.join(' ') + ' -a ${1}'"
    else
      echo "The folder doesn't contain any ${environment} environment definition"
      return 1
    fi
  else
    echo "Load has to be done inside a folder versionned by GIT"
    return 1
  fi
}

env_vars___install_environment () {
  if [[ "${1}" == "" ]]; then
    echo "An environment is needed as parameter"
    return 1
  elif [[ -d $(pwd)/.git ]]; then
    if [[ "$(env_vars___find_root_folder $(pwd))" == "/" ]]; then
      echo "Install has to be done inside a folder versionned by GIT"
      return 1
    fi

    env_files=${ENV_VARS_FOLDER}/${1}
    if ls ${env_files}.* &> /dev/null; then
      for file in ${env_files}.*; do
        env=${file##*.}
        ln -s ${file} $(env_vars___find_root_folder $(pwd))/.env_vars.${env}
      done
    else
      echo "'${1}' is not a valid environment"
      return 1
    fi
  else
    echo "The installation has to be done at the top GIT folder"
    return 1
  fi
}

env_vars___load_environment () {
  env="${1}"
  if [[ "${env}" == "" ]]; then
    env="dev"
  fi

  if [[ "$(env_vars___find_root_folder $(pwd))" != "/" ]]; then
    if [[ -e $(env_vars___find_root_folder $(pwd))/.env_vars.${env} ]]; then
      source $(env_vars___find_root_folder $(pwd))/.env_vars.${env}
    else
      echo "The folder doesn't contain an ${env} environment definition"
      return 1
    fi
  else
    echo "Load has to be done inside a folder versionned by GIT"
    return 1
  fi
}

function environment () {
  case "${1}" in
    install)
      env_vars___install_environment "${2}"
      return $?
      ;;
    load)
      env_vars___load_environment "${2}"
      return $?
      ;;
    export)
      env_vars___export_to_heroku "${2}" "${3}"
      return $?
      ;;
    *)
      echo "Command not supported. Usage: $(basename ${0}) install <project-name> | load"
      return 1
  esac
}
